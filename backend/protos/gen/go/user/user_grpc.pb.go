// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: user/user.proto

package userv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	User_MyUser_FullMethodName       = "/auth.User/MyUser"
	User_MyUserUpdate_FullMethodName = "/auth.User/MyUserUpdate"
	User_User_FullMethodName         = "/auth.User/User"
	User_UserList_FullMethodName     = "/auth.User/UserList"
	User_FriendAdd_FullMethodName    = "/auth.User/FriendAdd"
	User_FriendDelete_FullMethodName = "/auth.User/FriendDelete"
	User_FriendList_FullMethodName   = "/auth.User/FriendList"
	User_BlockAdd_FullMethodName     = "/auth.User/BlockAdd"
	User_BlockDelete_FullMethodName  = "/auth.User/BlockDelete"
	User_BlockList_FullMethodName    = "/auth.User/BlockList"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	MyUser(ctx context.Context, in *MyUserRequest, opts ...grpc.CallOption) (*MyUserResponse, error)
	MyUserUpdate(ctx context.Context, in *MyUserUpdateRequest, opts ...grpc.CallOption) (*MyUserUpdateResponse, error)
	User(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	FriendAdd(ctx context.Context, in *FriendAddRequest, opts ...grpc.CallOption) (*FriendAddResponse, error)
	FriendDelete(ctx context.Context, in *FriendDeleteRequest, opts ...grpc.CallOption) (*FriendDeleteResponse, error)
	FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error)
	BlockAdd(ctx context.Context, in *BlockAddRequest, opts ...grpc.CallOption) (*BlockAddResponse, error)
	BlockDelete(ctx context.Context, in *BlockDeleteRequest, opts ...grpc.CallOption) (*BlockDeleteResponse, error)
	BlockList(ctx context.Context, in *BlockListRequest, opts ...grpc.CallOption) (*BlockListResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) MyUser(ctx context.Context, in *MyUserRequest, opts ...grpc.CallOption) (*MyUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MyUserResponse)
	err := c.cc.Invoke(ctx, User_MyUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) MyUserUpdate(ctx context.Context, in *MyUserUpdateRequest, opts ...grpc.CallOption) (*MyUserUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MyUserUpdateResponse)
	err := c.cc.Invoke(ctx, User_MyUserUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) User(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, User_User_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, User_UserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FriendAdd(ctx context.Context, in *FriendAddRequest, opts ...grpc.CallOption) (*FriendAddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendAddResponse)
	err := c.cc.Invoke(ctx, User_FriendAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FriendDelete(ctx context.Context, in *FriendDeleteRequest, opts ...grpc.CallOption) (*FriendDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendDeleteResponse)
	err := c.cc.Invoke(ctx, User_FriendDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendListResponse)
	err := c.cc.Invoke(ctx, User_FriendList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BlockAdd(ctx context.Context, in *BlockAddRequest, opts ...grpc.CallOption) (*BlockAddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockAddResponse)
	err := c.cc.Invoke(ctx, User_BlockAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BlockDelete(ctx context.Context, in *BlockDeleteRequest, opts ...grpc.CallOption) (*BlockDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockDeleteResponse)
	err := c.cc.Invoke(ctx, User_BlockDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BlockList(ctx context.Context, in *BlockListRequest, opts ...grpc.CallOption) (*BlockListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockListResponse)
	err := c.cc.Invoke(ctx, User_BlockList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility.
type UserServer interface {
	MyUser(context.Context, *MyUserRequest) (*MyUserResponse, error)
	MyUserUpdate(context.Context, *MyUserUpdateRequest) (*MyUserUpdateResponse, error)
	User(context.Context, *UserRequest) (*UserResponse, error)
	UserList(context.Context, *UserListRequest) (*UserListResponse, error)
	FriendAdd(context.Context, *FriendAddRequest) (*FriendAddResponse, error)
	FriendDelete(context.Context, *FriendDeleteRequest) (*FriendDeleteResponse, error)
	FriendList(context.Context, *FriendListRequest) (*FriendListResponse, error)
	BlockAdd(context.Context, *BlockAddRequest) (*BlockAddResponse, error)
	BlockDelete(context.Context, *BlockDeleteRequest) (*BlockDeleteResponse, error)
	BlockList(context.Context, *BlockListRequest) (*BlockListResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServer struct{}

func (UnimplementedUserServer) MyUser(context.Context, *MyUserRequest) (*MyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyUser not implemented")
}
func (UnimplementedUserServer) MyUserUpdate(context.Context, *MyUserUpdateRequest) (*MyUserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyUserUpdate not implemented")
}
func (UnimplementedUserServer) User(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method User not implemented")
}
func (UnimplementedUserServer) UserList(context.Context, *UserListRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedUserServer) FriendAdd(context.Context, *FriendAddRequest) (*FriendAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendAdd not implemented")
}
func (UnimplementedUserServer) FriendDelete(context.Context, *FriendDeleteRequest) (*FriendDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendDelete not implemented")
}
func (UnimplementedUserServer) FriendList(context.Context, *FriendListRequest) (*FriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendList not implemented")
}
func (UnimplementedUserServer) BlockAdd(context.Context, *BlockAddRequest) (*BlockAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockAdd not implemented")
}
func (UnimplementedUserServer) BlockDelete(context.Context, *BlockDeleteRequest) (*BlockDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockDelete not implemented")
}
func (UnimplementedUserServer) BlockList(context.Context, *BlockListRequest) (*BlockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockList not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}
func (UnimplementedUserServer) testEmbeddedByValue()              {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	// If the following call pancis, it indicates UnimplementedUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_MyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).MyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_MyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).MyUser(ctx, req.(*MyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_MyUserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyUserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).MyUserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_MyUserUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).MyUserUpdate(ctx, req.(*MyUserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_User_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).User(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserList(ctx, req.(*UserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FriendAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FriendAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FriendAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FriendAdd(ctx, req.(*FriendAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FriendDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FriendDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FriendDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FriendDelete(ctx, req.(*FriendDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FriendList(ctx, req.(*FriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BlockAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BlockAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_BlockAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BlockAdd(ctx, req.(*BlockAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BlockDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BlockDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_BlockDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BlockDelete(ctx, req.(*BlockDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_BlockList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BlockList(ctx, req.(*BlockListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MyUser",
			Handler:    _User_MyUser_Handler,
		},
		{
			MethodName: "MyUserUpdate",
			Handler:    _User_MyUserUpdate_Handler,
		},
		{
			MethodName: "User",
			Handler:    _User_User_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _User_UserList_Handler,
		},
		{
			MethodName: "FriendAdd",
			Handler:    _User_FriendAdd_Handler,
		},
		{
			MethodName: "FriendDelete",
			Handler:    _User_FriendDelete_Handler,
		},
		{
			MethodName: "FriendList",
			Handler:    _User_FriendList_Handler,
		},
		{
			MethodName: "BlockAdd",
			Handler:    _User_BlockAdd_Handler,
		},
		{
			MethodName: "BlockDelete",
			Handler:    _User_BlockDelete_Handler,
		},
		{
			MethodName: "BlockList",
			Handler:    _User_BlockList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
